name: continuous-delivery

on:
  pull_request:
  workflow_dispatch:

jobs:

  change-triage:
    name: Check changed files
    runs-on: ubuntu-22.04
    outputs:
      pg4k-pgd-changed: ${{ steps.filter.outputs.pg4k-pgd-changed }}
      ep4k-changed: ${{ steps.filter.outputs.ep4k-changed }}
      ep4k-lts-changed: ${{ steps.filter.outputs.ep4k-lts-changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Check for changes
        uses: dorny/paths-filter@v3.0.2
        id: filter
        with:
          base: ${{ (github.event_name == 'schedule') && 'main' || '' }}
          filters: |
            pg4k-pgd-changed:
              - 'charts/edb-postgres-distributed-for-kubernetes/**'
            ep4k-changed:
              - 'charts/edb-postgres-for-kubernetes/**'
            ep4k-lts-changed:
              - 'charts/edb-postgres-distributed-for-kubernetes/charts/edb-postgres-for-kubernetes-lts/**'

  deploy-ep4k:
    runs-on: ubuntu-22.04
    needs:
      - change-triage
    if: needs.change-triage.outputs.ep4k-changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.11.3

      - name: Create kind cluster
        uses: helm/kind-action@v1.10.0

      - name: Deploy using helm chart
        run: |
          helm upgrade --install edb-pg4k --namespace postgresql-operator-system \
          --create-namespace charts/edb-postgres-for-kubernetes \
          --set image.imageCredentials.username=${{ secrets.CS_USER }} \
          --set image.imageCredentials.password=${{ secrets.CS_PASSWORD }} \
          --wait --timeout 10m

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Deploy a cluster
        run: |
          kubectl apply -f hack/samples/ep4k-cluster.yaml

          PHASE="Cluster in healthy state"
          kubectl wait --timeout=5m --for=jsonpath='{.status.phase}'="$PHASE" clusters/cluster-example

  deploy-ep4k-lts:
    runs-on: ubuntu-22.04
    needs:
      - change-triage
    if: needs.change-triage.outputs.ep4k-lts-changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.11.3

      - name: Create kind cluster
        uses: helm/kind-action@v1.10.0

      - name: Deploy using helm chart
        run: |
          helm upgrade --install edb-pg4k-lts --namespace postgresql-operator-system \
          --create-namespace charts/edb-postgres-distributed-for-kubernetes/charts/edb-postgres-for-kubernetes-lts
          --set image.imageCredentials.username=${{ secrets.CS_USER }} \
          --set image.imageCredentials.password=${{ secrets.CS_PASSWORD }} \
          --wait --timeout 10m

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Deploy a cluster
        run: |
          kubectl apply -f hack/samples/ep4k-cluster.yaml

          PHASE="Cluster in healthy state"
          kubectl wait --timeout=5m --for=jsonpath='{.status.phase}'="$PHASE" clusters/cluster-example

  deploy-pg4k-pgd:
    runs-on: ubuntu-22.04
    needs:
      - change-triage
    if: needs.change-triage.outputs.pg4k-pgd-changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.11.3

      - name: Create kind cluster
        uses: helm/kind-action@v1.10.0

      - name: Deploy using helm chart
        run: |
          helm dependency build charts/edb-postgres-distributed-for-kubernetes/charts/edb-postgres-for-kubernetes-lts
          helm dependency build charts/edb-postgres-distributed-for-kubernetes
          helm upgrade --install edb-pg4k-pgd --namespace pgd-operator-system \
          --create-namespace charts/edb-postgres-distributed-for-kubernetes  \
          --set image.imageCredentials.username=${{ secrets.CS_USER }} \
          --set image.imageCredentials.password=${{ secrets.CS_PASSWORD }} \
          --wait --timeout 10m

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Deploy a cluster
        run: |
          kubectl apply -f hack/samples/issuer-selfsigned.yaml
          kubectl apply -f hack/samples/pg4k-pgd-cluster.yaml

          PHASE="PGDGroup - Healthy"
          kubectl wait --timeout=8m --for=jsonpath='{.status.phase}'="$PHASE" pgdgroups/region-a
          kubectl wait --timeout=8m --for=jsonpath='{.status.phase}'="$PHASE" pgdgroups/region-b
          kubectl wait --timeout=8m --for=jsonpath='{.status.phase}'="$PHASE" pgdgroups/region-c

  deploy-ep4k-single-namespace:
    runs-on: ubuntu-22.04
    needs:
      - change-triage
    if: needs.change-triage.outputs.ep4k-changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.11.3

      - name: Create kind cluster
        uses: helm/kind-action@v1.10.0

      - name: Deploy in single-namespace mode using helm chart
        run: |
          helm upgrade --install edb-pg4k --namespace single-install \
          --create-namespace charts/edb-postgres-for-kubernetes \
          --set config.clusterWide=false \
          --set image.imageCredentials.username=${{ secrets.CS_USER }} \
          --set image.imageCredentials.password=${{ secrets.CS_PASSWORD }} \
          --wait --timeout 10m

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Deploy a cluster in the watched namespace
        run: |
          kubectl -n single-install apply -f hack/samples/ep4k-cluster.yaml
          PHASE="Cluster in healthy state"
          kubectl -n single-install wait --timeout=5m --for=jsonpath='{.status.phase}'="$PHASE" clusters/cluster-example

      - name: Ignore deploying a cluster in another namespace
        run: |
          kubectl create ns test-ignore
          kubectl -n test-ignore apply -f hack/samples/ep4k-cluster.yaml
          kubectl -n test-ignore get pods 2>&1 >/dev/null | grep 'No resources found'

  deploy-ep4k-lts-single-namespace:
    runs-on: ubuntu-22.04
    needs:
      - change-triage
    if: needs.change-triage.outputs.ep4k-lts-changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.11.3

      - name: Create kind cluster
        uses: helm/kind-action@v1.10.0

      - name: Deploy in single-namespace mode using helm chart
        run: |
          helm upgrade --install edb-pg4k-lts --namespace single-install \
          --set config.clusterWide=false \
          --create-namespace charts/edb-postgres-distributed-for-kubernetes/charts/edb-postgres-for-kubernetes-lts
          --set image.imageCredentials.username=${{ secrets.CS_USER }} \
          --set image.imageCredentials.password=${{ secrets.CS_PASSWORD }} \
          --wait --timeout 10m

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Deploy a cluster in the watched namespace
        run: |
          kubectl -n single-install apply -f hack/samples/ep4k-cluster.yaml
          PHASE="Cluster in healthy state"
          kubectl -n single-install wait --timeout=5m --for=jsonpath='{.status.phase}'="$PHASE" clusters/cluster-example

      - name: Ignore deploying a cluster in another namespace
        run: |
          kubectl create ns test-ignore
          kubectl -n test-ignore apply -f hack/samples/ep4k-cluster.yaml
          kubectl -n test-ignore get pods 2>&1 >/dev/null | grep 'No resources found'
