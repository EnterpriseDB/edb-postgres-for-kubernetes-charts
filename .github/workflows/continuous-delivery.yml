name: continuous-delivery

on:
  pull_request:
  workflow_dispatch:

jobs:
  install_deploy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3.5
        with:
          version: v3.6.2

      - name: Create kind cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: chart-testing

      - name: Deploy using helm chart
        run: |
          helm upgrade --install cnp --namespace postgresql-operator-system \
          --create-namespace charts/cloud-native-postgresql --wait

      - name: Install kubectl
        uses: azure/setup-kubectl@v3.2

      - name: Deploy a cluster
        run: |
          ## load postgres image
          image=quay.io/enterprisedb/postgresql:14.2
          docker pull $image
          kind load docker-image $image --name chart-testing
          
          cat <<EOF | kubectl apply -f -
          # Example of PostgreSQL cluster
          apiVersion: postgresql.k8s.enterprisedb.io/v1
          kind: Cluster
          metadata:
            name: cluster-example
          spec:
            instances: 3
            storage:
              size: 1Gi
          EOF

          ITER=0
          while true; do
            if [[ $ITER -ge 300 ]]; then
              echo "Cluster not ready"
              exit 1
            fi
            READY_INSTANCES=$(kubectl get cluster cluster-example -o jsonpath='{.status.readyInstances}')
            if (( ((ITER % 30)) == 0)); then
              echo "Ready instances are $READY_INSTANCES"
              echo "###########operators"
              kubectl -n postgresql-operator-system get po
              echo "############nodes"
              kubectl get nodes
              echo "############describe"
              kubectl describe cluster cluster-example
              echo "############po"
              kubectl get po
              echo "############pvc"
              kubectl get pvc
              echo "############pv"
              kubectl get pv
              echo "############yaml"
              kubectl get cluster cluster-example -o yaml
              kubectl -n postgresql-operator-system logs  $(kubectl -n postgresql-operator-system get po -o NAME)
            fi
            if [[ "$READY_INSTANCES" == 3 ]]; then
              echo "Cluster up and running"
              break
            fi
            sleep 1
            (( ++ITER ))
          done
